/*
 * Copyright 2023-2024 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.springframework.ai.openai;

import java.util.Objects;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;

import org.springframework.ai.image.ImageOptions;

/**
 * OpenAI Image API options. OpenAiImageOptions.java
 *
 * @author Mark Pollack
 * @author Christian Tzolov
 * @since 0.8.0
 */
@JsonInclude(JsonInclude.Include.NON_NULL)
public class OpenAiImageOptions implements ImageOptions {

	/**
	 * The number of images to generate. Must be between 1 and 10. For dall-e-3, only n=1
	 * is supported.
	 */
	@JsonProperty("n")
	private Integer n;

	/**
	 * The model to use for image generation.
	 */
	@JsonProperty("model")
	private String model;

	/**
	 * The width of the generated images. Must be one of 256, 512, or 1024 for dall-e-2.
	 * This property is interconnected with the 'size' property - setting both width and
	 * height will automatically compute and set the size in "widthxheight" format.
	 * Conversely, setting a valid size string will parse and set the individual width and
	 * height values.
	 */
	@JsonProperty("size_width")
	private Integer width;

	/**
	 * The height of the generated images. Must be one of 256, 512, or 1024 for dall-e-2.
	 * This property is interconnected with the 'size' property - setting both width and
	 * height will automatically compute and set the size in "widthxheight" format.
	 * Conversely, setting a valid size string will parse and set the individual width and
	 * height values.
	 */
	@JsonProperty("size_height")
	private Integer height;

	/**
	 * The quality of the image that will be generated. auto (default value) will
	 * automatically select the best quality for the given model. high, medium and low are
	 * supported for gpt-image-1. hd and standard are supported for dall-e-3. standard is
	 * the only option for dall-e-2.
	 */
	@JsonProperty("quality")
	private String quality;

	/**
	 * The format in which generated images with dall-e-2 and dall-e-3 are returned. Must
	 * be one of url or b64_json. URLs are only valid for 60 minutes after the image has
	 * been generated. This parameter isn't supported for gpt-image-1 which will always
	 * return base64-encoded images.
	 */
	@JsonProperty("response_format")
	private String responseFormat;

	/**
	 * The size of the generated images. Must be one of 1024x1024, 1536x1024 (landscape),
	 * 1024x1536 (portrait), or auto (default value) for gpt-image-1. Must be one of
	 * 256x256, 512x512, or 1024x1024 for dall-e-2. Must be one of 1024x1024, 1792x1024,
	 * or 1024x1792 for dall-e-3. This property is automatically computed when both width
	 * and height are set, following the format "widthxheight". When setting this property
	 * directly, it must follow the format "WxH" where W and H are valid integers. Invalid
	 * formats will result in null width and height values.
	 */
	@JsonProperty("size")
	private String size;

	/**
	 * The style of the generated images. Must be one of vivid or natural. Vivid causes
	 * the model to lean towards generating hyper-real and dramatic images. Natural causes
	 * the model to produce more natural, less hyper-real looking images. This param is
	 * only supported for dall-e-3.
	 */
	@JsonProperty("style")
	private String style;

	/**
	 * A unique identifier representing your end-user, which can help OpenAI to monitor
	 * and detect abuse.
	 */
	@JsonProperty("user")
	private String user;

	/**
	 * Allows to set transparency for the background of the generated image(s). This
	 * parameter is only supported for gpt-image-1. Must be one of transparent, opaque or
	 * auto (default value). When auto is used, the model will automatically determine the
	 * best background for the image.
	 */
	@JsonProperty("background")
	private String background;

	/**
	 * Control the content-moderation level for images generated by gpt-image-1. Must be
	 * either low for less restrictive filtering or auto (default value).
	 */
	@JsonProperty("moderation")
	private String moderation;

	/**
	 * The compression level (0-100%) for the generated images. This parameter is only
	 * supported for gpt-image-1 with the webp or jpeg output formats, and defaults to
	 * 100.
	 */
	@JsonProperty("output_compression")
	private Integer outputCompression;

	/**
	 * The format in which the generated images are returned. This parameter is only
	 * supported for gpt-image-1. Must be one of png, jpeg, or webp.
	 */
	@JsonProperty("output_format")
	private String outputFormat;

	/**
	 * The number of partial images to generate. This parameter is used for streaming
	 * responses that return partial images. Value must be between 0 and 3. When set to 0,
	 * the response will be a single image sent in one streaming event.
	 */
	@JsonProperty("partial_images")
	private Integer partialImages;

	/**
	 * Generate the image in streaming mode. Defaults to false. This parameter is only
	 * supported for gpt-image-1.
	 */
	@JsonProperty("stream")
	private Boolean stream;

	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Create a new OpenAiImageOptions instance from an existing one.
	 * @param fromOptions The options to copy from
	 * @return A new OpenAiImageOptions instance
	 */
	public static OpenAiImageOptions fromOptions(OpenAiImageOptions fromOptions) {
		OpenAiImageOptions options = new OpenAiImageOptions();
		options.n = fromOptions.n;
		options.model = fromOptions.model;
		options.width = fromOptions.width;
		options.height = fromOptions.height;
		options.quality = fromOptions.quality;
		options.responseFormat = fromOptions.responseFormat;
		options.size = fromOptions.size;
		options.style = fromOptions.style;
		options.user = fromOptions.user;
		options.background = fromOptions.background;
		options.moderation = fromOptions.moderation;
		options.outputCompression = fromOptions.outputCompression;
		options.outputFormat = fromOptions.outputFormat;
		options.partialImages = fromOptions.partialImages;
		options.stream = fromOptions.stream;
		return options;
	}

	@Override
	public Integer getN() {
		return this.n;
	}

	public void setN(Integer n) {
		this.n = n;
	}

	@Override
	public String getModel() {
		return this.model;
	}

	public void setModel(String model) {
		this.model = model;
	}

	public String getQuality() {
		return this.quality;
	}

	public void setQuality(String quality) {
		this.quality = quality;
	}

	@Override
	public String getResponseFormat() {
		return this.responseFormat;
	}

	public void setResponseFormat(String responseFormat) {
		this.responseFormat = responseFormat;
	}

	@Override
	public Integer getWidth() {
		if (this.width != null) {
			return this.width;
		}
		else if (this.size != null) {
			try {
				String[] dimensions = this.size.split("x");
				if (dimensions.length != 2) {
					return null;
				}
				return Integer.parseInt(dimensions[0]);
			}
			catch (Exception ex) {
				return null;
			}
		}
		return null;
	}

	public void setWidth(Integer width) {
		this.width = width;
		if (this.width != null && this.height != null) {
			this.size = this.width + "x" + this.height;
		}
	}

	@Override
	public Integer getHeight() {
		if (this.height != null) {
			return this.height;
		}
		else if (this.size != null) {
			try {
				String[] dimensions = this.size.split("x");
				if (dimensions.length != 2) {
					return null;
				}
				return Integer.parseInt(dimensions[1]);
			}
			catch (Exception ex) {
				return null;
			}
		}
		return null;
	}

	public void setHeight(Integer height) {
		this.height = height;
		if (this.width != null && this.height != null) {
			this.size = this.width + "x" + this.height;
		}
	}

	@Override
	public String getStyle() {
		return this.style;
	}

	public void setStyle(String style) {
		this.style = style;
	}

	public String getUser() {
		return this.user;
	}

	public void setUser(String user) {
		this.user = user;
	}

	public String getSize() {
		if (this.size != null) {
			return this.size;
		}
		return (this.width != null && this.height != null) ? this.width + "x" + this.height : null;
	}

	public void setSize(String size) {
		this.size = size;

		// Parse the size string to update width and height
		if (size != null) {
			try {
				String[] dimensions = size.split("x");
				if (dimensions.length == 2) {
					this.width = Integer.parseInt(dimensions[0]);
					this.height = Integer.parseInt(dimensions[1]);
				}
			}
			catch (Exception ex) {
				// If parsing fails, leave width and height unchanged
			}
		}
	}

	public String getBackground() {
		return this.background;
	}

	public void setBackground(String background) {
		this.background = background;
	}

	public String getModeration() {
		return this.moderation;
	}

	public void setModeration(String moderation) {
		this.moderation = moderation;
	}

	public Integer getOutputCompression() {
		return this.outputCompression;
	}

	public void setOutputCompression(Integer outputCompression) {
		this.outputCompression = outputCompression;
	}

	public String getOutputFormat() {
		return this.outputFormat;
	}

	public void setOutputFormat(String outputFormat) {
		this.outputFormat = outputFormat;
	}

	public Integer getPartialImages() {
		return this.partialImages;
	}

	public void setPartialImages(Integer partialImages) {
		this.partialImages = partialImages;
	}

	public Boolean getStream() {
		return this.stream;
	}

	public void setStream(Boolean stream) {
		this.stream = stream;
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof OpenAiImageOptions that)) {
			return false;
		}
		return Objects.equals(this.n, that.n) && Objects.equals(this.model, that.model)
				&& Objects.equals(this.width, that.width) && Objects.equals(this.height, that.height)
				&& Objects.equals(this.quality, that.quality)
				&& Objects.equals(this.responseFormat, that.responseFormat) && Objects.equals(this.size, that.size)
				&& Objects.equals(this.style, that.style) && Objects.equals(this.user, that.user)
				&& Objects.equals(this.background, that.background) && Objects.equals(this.moderation, that.moderation)
				&& Objects.equals(this.outputCompression, that.outputCompression)
				&& Objects.equals(this.outputFormat, that.outputFormat)
				&& Objects.equals(this.partialImages, that.partialImages) && Objects.equals(this.stream, that.stream);
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.n, this.model, this.width, this.height, this.quality, this.responseFormat, this.size,
				this.style, this.user, this.background, this.moderation, this.outputCompression, this.outputFormat,
				this.partialImages, this.stream);
	}

	@Override
	public String toString() {
		return "OpenAiImageOptions{" + "n=" + this.n + ", model='" + this.model + '\'' + ", width=" + this.width
				+ ", height=" + this.height + ", quality='" + this.quality + '\'' + ", responseFormat='"
				+ this.responseFormat + '\'' + ", size='" + this.size + '\'' + ", style='" + this.style + '\''
				+ ", user='" + this.user + '\'' + ", background='" + this.background + '\'' + ", moderation='"
				+ this.moderation + '\'' + ", outputCompression=" + this.outputCompression + ", outputFormat='"
				+ this.outputFormat + '\'' + ", partialImages=" + this.partialImages + ", stream=" + this.stream + '}';
	}

	/**
	 * Create a copy of this options instance.
	 * @return A new instance with the same options
	 */
	public OpenAiImageOptions copy() {
		return fromOptions(this);
	}

	public static final class Builder {

		protected OpenAiImageOptions options;

		public Builder() {
			this.options = new OpenAiImageOptions();
		}

		public Builder(OpenAiImageOptions options) {
			this.options = options;
		}

		public Builder N(Integer n) {
			this.options.setN(n);
			return this;
		}

		public Builder model(String model) {
			this.options.setModel(model);
			return this;
		}

		public Builder quality(String quality) {
			this.options.setQuality(quality);
			return this;
		}

		public Builder responseFormat(String responseFormat) {
			this.options.setResponseFormat(responseFormat);
			return this;
		}

		public Builder width(Integer width) {
			this.options.setWidth(width);
			return this;
		}

		public Builder height(Integer height) {
			this.options.setHeight(height);
			return this;
		}

		public Builder size(String size) {
			this.options.setSize(size);
			return this;
		}

		public Builder style(String style) {
			this.options.setStyle(style);
			return this;
		}

		public Builder user(String user) {
			this.options.setUser(user);
			return this;
		}

		public Builder background(String background) {
			this.options.setBackground(background);
			return this;
		}

		public Builder moderation(String moderation) {
			this.options.setModeration(moderation);
			return this;
		}

		public Builder outputCompression(Integer outputCompression) {
			this.options.setOutputCompression(outputCompression);
			return this;
		}

		public Builder outputFormat(String outputFormat) {
			this.options.setOutputFormat(outputFormat);
			return this;
		}

		public Builder partialImages(Integer partialImages) {
			this.options.setPartialImages(partialImages);
			return this;
		}

		public Builder stream(Boolean stream) {
			this.options.setStream(stream);
			return this;
		}

		public OpenAiImageOptions build() {
			return this.options;
		}

	}

}
